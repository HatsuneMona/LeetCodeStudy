/**
给你一个字符串 word ，该字符串由数字和小写英文字母组成。

 请你用空格替换每个不是数字的字符。例如，"a123bc34d8ef34" 将会变成 " 123 34 8 34" 。注意，剩下的这些整数为（相邻彼此至少有一个
空格隔开）："123"、"34"、"8" 和 "34" 。

 返回对 word 完成替换后形成的 不同 整数的数目。

 只有当两个整数的 不含前导零 的十进制表示不同， 才认为这两个整数也不同。



 示例 1：


输入：word = "a123bc34d8ef34"
输出：3
解释：不同的整数有 "123"、"34" 和 "8" 。注意，"34" 只计数一次。


 示例 2：


输入：word = "leet1234code234"
输出：2


 示例 3：


输入：word = "a1b01c001"
输出：1
解释："1"、"01" 和 "001" 视为同一个整数的十进制表示，因为在比较十进制值时会忽略前导零的存在。




 提示：


 1 <= word.length <= 1000
 word 由数字和小写英文字母组成


 Related Topics 哈希表 字符串 👍 65 👎 0

*/

package leetcode

import (
	"fmt"
)

func Q1805Main() {
	fmt.Println(
		"预期：3，实际结果：",
		numDifferentIntegers("2393706880236110407059624696967828762752651982730115221690437821508229419410771541532394006597463715513741725852432559057224478815116557380260390432211227579663571046845842281704281749571110076974264971989893607137140456254346955633455446057823738757323149856858154529105301197388177242583658641529908583934918768953462557716z97438020429952944646288084173334701047574188936201324845149110176716130267041674438237608038734431519439828191344238609567530399189316846359766256507371240530620697102864238792350289978450509162697068948604722646739174590530336510475061521094503850598453536706982695212493902968251702853203929616930291257062173c79487281900662343830648295410"),
	)
	fmt.Println(
		"预期：1，实际结果：",
		numDifferentIntegers("a1b01c001"),
	)
	fmt.Println(
		"预期：1，实际结果：",
		numDifferentIntegers("0a00a000a0"),
	)
}

// leetcode submit region begin(Prohibit modification and deletion)
func numDifferentIntegers(word string) int {
	stat := make(map[string]struct{})

	for ps := 0; ps < len(word); {
		// 第一步：找到起始位置
		if word[ps] < '0' || '9' < word[ps] { // 不是数字
			ps++

		} else { // 是数字
			pe := ps
			// 第二步：找到起始位置后，找末尾位置
			for pe < len(word) {
				if word[pe] >= '0' && word[pe] <= '9' { // 是数字
					pe++
				} else {
					break
				}
			}
			// 第三步：找到末尾位置后，调整起始位置（为了排除 '0'）
			for ps < pe-1 { // ps < pe-1 保证至少有一位数字（0的情况）
				if word[ps] == '0' {
					ps++
				} else {
					break
				}
			}

			// 第四步：统计
			stat[word[ps:pe]] = struct{}{}

			ps = pe + 1
		}

	}

	return len(stat)
}

// leetcode submit region end(Prohibit modification and deletion)
