### 解题思路

`Map`记录词频，按照词频及数值排序。

![Screen Shot 2022-09-19 at 21.54.33.png](https://pic.leetcode-cn.com/1663598321-xoTbyG-Screen%20Shot%202022-09-19%20at%2021.54.33.png)

![Screen Shot 2022-09-19 at 21.35.17.png](https://pic.leetcode-cn.com/1663598434-kEvYqf-Screen%20Shot%202022-09-19%20at%2021.35.17.png)

![Screen Shot 2022-09-19 at 09.28.41.png](https://pic.leetcode-cn.com/1663598490-WWFtDl-Screen%20Shot%202022-09-19%20at%2009.28.41.png)

### 代码

* []

```Rust
impl Solution {
    pub fn frequency_sort(mut nums: Vec<i32>) -> Vec<i32> {
        use std::collections::HashMap;
        let mut cnt = HashMap::new();
        for num in &nums { *cnt.entry(*num).or_insert(0) += 1; }
        nums.sort_by(|a, b| cnt[a].cmp(&cnt[b]).then(b.cmp(a)));
        nums
    }
}
```

* []

```Go
func frequencySort(nums []int) []int {
	cnt:= map[int]int{}
	for _, num := range nums {
		cnt[num]++
	}

	sort.Slice(nums, func(i, j int) bool {
		if cnt[nums[i]] != cnt[nums[j]] {
			return cnt[nums[i]] < cnt[nums[j]]
		}
		return nums[j] < nums[i]
	})
	return nums
}
```

* []

```Java
class Solution {
    public int[] frequencySort(int[] nums) {
        Map<Integer, Integer> map = new HashMap<>();
        for (int num : nums) {
            map.put(num, map.getOrDefault(num, 0) + 1);
        }
        List<Integer> list = new ArrayList<>(map.keySet());
        Collections.sort(list, (a, b) -> {
            return (map.get(a) == map.get(b))? b - a : map.get(a) - map.get(b);
        });
            
        int[] res = new int[nums.length];
        int i = 0;
        for (int num : list) {
            for (int j = 0; j < map.get(num); j++) {
                res[i++] = num;
            }
        }
        return res;
    }
}
```

